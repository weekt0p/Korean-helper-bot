import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = '7998241772:AAGkLSYeR1waJOfJyL848t_iFZNRX8r_6tg'
CHANNEL_ID = '@korean_helper'

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üìÑ –í–∏–∑—ã", "üè¶ –ë–∞–Ω–∫–∏"],
        ["üÜî ID –∫–∞—Ä—Ç–∞", "üéì –£—á—ë–±–∞ / –¢.–ë."],
        ["‚öñÔ∏è –®—Ç—Ä–∞—Ñ—ã", "üßæ –ù–∞–ª–æ–≥–∏"],
        ["üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞", "üè° –ñ–∏–ª—å—ë"],
        ["üìã –ö—Ä–µ–¥–∏—Ç—ã", "üì± –ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"],
        ["üìû –ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bot = context.bot
    member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
    if member.status in ['member', 'creator', 'administrator']:
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!"

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá",
            reply_markup=main_keyboard
        )
    else:
        await update.message.reply_text(
            "‚ùó –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/korean_helper –∏ –Ω–∞–∂–º–∏ /start"
        )

from telegram.ext import ContextTypes

banks_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["1Ô∏è‚É£ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç", "2Ô∏è‚É£ –õ–∏–º–∏—Ç—ã"],
        ["3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏", "4Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ –Æ–∂–Ω—É—é –ö–æ—Ä–µ—é"],
        ["5Ô∏è‚É£ –ö–∞–∫–æ–π –±–∞–Ω–∫ –≤—ã–±—Ä–∞—Ç—å?", "6Ô∏è‚É£ –ù–∞–∑–∞–¥"]
    ],
    resize_keyboard=True
)

bank_answers = {
    "1Ô∏è‚É£ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç": "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç –Ω—É–∂–Ω–æ: ID Card, —Å–ø—Ä–∞–≤–∫–∞ —Å —Ä–∞–±–æ—Ç—ã/–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è, –ø–∞—Å–ø–æ—Ä—Ç.",
    "2Ô∏è‚É£ –õ–∏–º–∏—Ç—ã": "–õ–∏–º–∏—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 300.000‚Ç© –¥–æ 1.000.000‚Ç© –≤ –¥–µ–Ω—å.",
    "3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏": "–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä–æ–¥–∏–Ω—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GMoney/Hanpass/e9Pay.",
    "4Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ –Æ–∂–Ω—É—é –ö–æ—Ä–µ—é": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ó–æ–ª–æ—Ç—É—é –ö–æ—Ä–æ–Ω—É + GMoney/Hanpass.",
    "5Ô∏è‚É£ –ö–∞–∫–æ–π –±–∞–Ω–∫ –≤—ã–±—Ä–∞—Ç—å?": "–í Hana Bank –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç –±–µ–∑ ID –∫–∞—Ä—Ç—ã, —Å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã!",
}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üè¶ –ë–∞–Ω–∫–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç üëá", reply_markup=banks_keyboard)
        context.user_data["state"] = "banks"
    elif context.user_data.get("state") == "banks":
        answer = bank_answers.get(text)
        if answer:
            await update.message.reply_text(answer)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é üëá", reply_markup=banks_keyboard)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ /start", reply_markup=main_keyboard)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
